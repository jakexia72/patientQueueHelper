
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>

<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https://www.gstatic.com/firebasejs/6.3.5/firebase-app.js"></script>



<!-- Add Firebase products that you want to use -->
<script src="https://www.gstatic.com/firebasejs/6.3.4/firebase-auth.js"></script>
<script src="https://www.gstatic.com/firebasejs/6.3.4/firebase-firestore.js"></script>
<script src="/scripts/uiEmbelishment.js" charset="utf-8"></script>

<link rel="stylesheet" href="/styles/style.css">
<script src="/scripts/main.js" charset="utf-8"></script>
<script src="/scripts/uiEmbelishment.js" charset="utf-8"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
<script src="/scripts/external/chartjsPlugins.js"></script>


<script>
  // Your web app's Firebase configuration
  var firebaseConfig = {
    apiKey: "AIzaSyB7IhY6ENIFHUjkaTVQ8UJua9MChQSlA28",
    authDomain: "patient-queue-89500.firebaseapp.com",
    databaseURL: "https://patient-queue-89500.firebaseio.com",
    projectId: "patient-queue-89500",
    storageBucket: "patient-queue-89500.appspot.com",
    messagingSenderId: "331684236394",
    appId: "1:331684236394:web:1b8d89f19453feaf"
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();

</script>

<body>
  <div class = "mainContainer">
    <h1 style = "display:none;" id = "roomId"><%= roomId %></h1>
    <h1 style = "display:none;" id = "patientId"><%= patientId %></h1>
    <h1 id = "ticketNum"></h1>
    <div class = "container">
      <h3 id = "initTimeRemain"></h3>
      <canvas id="timeDisplayChart"></canvas>
    </div>
    <div id = "lineUp" class = "virtualLine">
      <div class = "avatarHolder">
        <p>Next -></p>
      </div>
    </div>
  </div>
</body>

<script type="text/javascript">
  var roomId = $('#roomId').text();
  var patientId = $('#patientId').text();
  var patientTimestamp;
  var patientNumber;
  var initialTimeRemaining;
  //Some set up
  db.collection("waiting-rooms").doc(roomId).collection("patients").doc(patientId).get().then((snapshot)=>{
    let patient = snapshot.data();
    patientTimestamp = patient.timestamp;
    patientNumber = patient.patientNumber;
    initialTimeRemaining = patient.initialWaitTime;
    // patientAvatarNumber = patient.avatarNumber;
    $('#ticketNum').html(patientNumber);
  })
  // const patientTimestamp = await getTimeStamp();
  var patientNumber;
  // var patientAvatarNumber;
  var initialTimeRemaining = 0;
  var currentTimeRemaining = 0;

 var prevCurrentTimeRemaining = 0;

  let waitingRoomRef = db.collection("waiting-rooms").doc(roomId).collection("patients");


  // db.collection("waiting-rooms").doc(roomId).collection("patients").doc(patientId).get().then((snapshot)=>{
  //   return snapshot.data().timestamp;
  // })
  //.where('timestamp', '<', patientTimestamp)


  waitingRoomRef.orderBy('timestamp').onSnapshot(snapshot =>{
    let changes = snapshot.docChanges();
    let atThisPatient = false;
    db.collection("waiting-rooms").doc(roomId).collection("patients").doc(patientId).get().then((snapshot)=>{
      patientTimestamp = snapshot.data().timestamp;
    })
    changes.forEach(change =>{
      if(change.type == 'added'){
        addPatientToLine(change.doc);
        // if(change.doc.id == patientId){
        //   atThisPatient = true;
        // } else if (!atThisPatient){
        //   currentTimeRemaining += change.doc.data().estimatedProcedureTime;
        // }
        if(change.doc.data().timestamp < patientTimestamp){
            currentTimeRemaining += change.doc.data().estimatedProcedureTime;
        }
      } else if (change.type == 'removed'){
        $('[data-id=' + change.doc.id + ']').remove();
        if(change.doc.data().timestamp < patientTimestamp){
          currentTimeRemaining -= change.doc.data().estimatedProcedureTime;
        }
      }
    })
    console.log(prevCurrentTimeRemaining + " : " + currentTimeRemaining);
    if(prevCurrentTimeRemaining != currentTimeRemaining){
      prevCurrentTimeRemaining = currentTimeRemaining;
      makeTimeDisplayChart(initialTimeRemaining,currentTimeRemaining);
    }
  })

  function addPatientToLine(doc){
    let patient = document.createElement('div');
    patient.setAttribute('data-id', doc.id);
    $(patient).addClass("avatarHolder");

    let avatar = document.createElement('div');
    $(avatar).addClass("patientAvatar");
    $(avatar).css("background-image","url(/images/avatars/"+ doc.data().avatarNumber +".svg)")

    let numDisplay = document.createElement('p');
    if(doc.id == patientId){
      $(numDisplay).html("<b>You</b>");
    } else {
      $(numDisplay).html(doc.data().patientNumber);
    }

    if(doc.data().timestamp > patientTimestamp){
      $(patient).css("opacity","0.3");
    }


    $(patient).append(avatar);
    $(patient).append(numDisplay);

    $('#lineUp').append(patient);
  }

  var timeDisplayChart;
  function makeTimeDisplayChart(initialTime,remainingTime){
    console.log(initialTime + "   :   " + remainingTime);
    if(typeof timeDisplayChart != 'undefined'){timeDisplayChart.destroy()};
    let ctx = document.getElementById('timeDisplayChart').getContext('2d');

    let passedTime = initialTime - remainingTime;
    monthBreakdownChart = new Chart(ctx, {
      type:'doughnut',
      data: {
        labels: ["passed time", "remaining time"],
        datasets: [{
          label: 'time',
          backgroundColor: ["lightblue","#F1F1F1"],
          data: [remainingTime,passedTime]//[passedTime,remainingTime]
        }]
      },
      options: {
        cutoutPercentage: 90,
        responsive: true,
        legend:{
          display: false
        },
        tooltips: {
          enabled: false
        },
        hover: {mode: null},
        plugins:{
          doughnutlabel:{
            labels: [
            {
              text: "About",
              font: {
                size: '50'
              },
              color: 'grey'
            },
            {
              text: getNiceTimeFromMinutes(remainingTime),
              font: {
                size: '100',
                weight: 'bold'
              },
              color: 'black'
            },
            {
              text: "Remaining",
              font: {
                size: '50'
              },
              color: 'grey'
            }]
          }
        }
      }
    })
  }

  </script>
