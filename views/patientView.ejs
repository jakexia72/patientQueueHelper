
<head>
   <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https://www.gstatic.com/firebasejs/6.3.5/firebase-app.js"></script>



<!-- Add Firebase products that you want to use -->
<script src="https://www.gstatic.com/firebasejs/6.3.4/firebase-auth.js"></script>
<script src="https://www.gstatic.com/firebasejs/6.3.4/firebase-firestore.js"></script>
<script src="/scripts/uiEmbelishment.js" charset="utf-8"></script>

<link rel="stylesheet" href="/styles/style.css">
<script src="/scripts/main.js" charset="utf-8"></script>
<script src="/scripts/uiEmbelishment.js" charset="utf-8"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
<script src="/scripts/external/chartjsPlugins.js"></script>


<script>
  // Your web app's Firebase configuration
  var firebaseConfig = {
    apiKey: "AIzaSyB7IhY6ENIFHUjkaTVQ8UJua9MChQSlA28",
    authDomain: "patient-queue-89500.firebaseapp.com",
    databaseURL: "https://patient-queue-89500.firebaseio.com",
    projectId: "patient-queue-89500",
    storageBucket: "patient-queue-89500.appspot.com",
    messagingSenderId: "331684236394",
    appId: "1:331684236394:web:1b8d89f19453feaf"
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();

</script>

<body>
  <!-- Modal -->
<div class="modal fade" id="leaveModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Are you sure you want to leave?</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p id = "placeInLine-modal"></p>
          Leaving means you will lose your spot!
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">continue waiting</button>
        <button id = "confirm-leave"type="button" class="btn btn-danger">Leave</button>
      </div>
    </div>
  </div>
</div>

  <div class = "mainContainer">
    <h1 style = "display:none;" id = "roomId"><%= roomId %></h1>
    <h1 style = "display:none;" id = "patientId"><%= patientId %></h1>
    <h1 id = "ticketNum"></h1>
    <div class = "container">
      <h3 id = "initTimeRemain"></h3>
      <canvas id="timeDisplayChart" width="300" height="300"></canvas>
    </div>

    <div id = "lineUp" class = "virtualLine">
      <div class = "avatarHolder">
        <p>Next â€º</p>
      </div>
    </div>
    <button id = "leaveBtn" class = "btn btn-primary" data-toggle="modal" data-target="#leaveModal">Leave the Line</button>
  </div>
  <div class = "secondaryContainer">
      <h1 id = "secondaryContainer-title">Looks like you're up next!</h1>
      <h2 id = "secondaryContainer-text">Thank you for waiting, please get ready for your procedure.</h2>
      <button id = "secondaryContainer-button" class = "btn btn-primary">I've finished my appointment</button>
  </div>
</body>

<script type="text/javascript">
  //getting variables
  var roomId = $('#roomId').text();
  var patientId = $('#patientId').text();

  var waitingRoomRef = db.collection("waiting-rooms").doc(roomId).collection("patients");

  //useful global variables
  var patientTimestamp;
  var patientNumber;
  var initialTimeRemaining;

  //prevent muliple pop-ups
  var openedErrorPath = false;

  //Some set up (only runs once!)
  db.collection("waiting-rooms").doc(roomId).collection("patients").doc(patientId).get().then((snapshot)=>{
    let patient = snapshot.data();

    //putting in variables
    patientTimestamp = patient.timestamp;
    patientNumber = patient.patientNumber;
    initialTimeRemaining = patient.initialWaitTime;
    // patientAvatarNumber = patient.avatarNumber;
    $('#ticketNum').html(patientNumber);
  }).catch(function(){
    console.log("noTimeStamp1");
    //run missing patient if the id is not present
    missingPatient()
  })


  //waiting related variables
  var initialTimeRemaining = 0;
  var currentTimeRemaining = 0;
  var numPatientsBefore = 0;
 var prevCurrentTimeRemaining = 0;

 //main db change listener
  waitingRoomRef.orderBy('timestamp').onSnapshot(snapshot =>{
    let changes = snapshot.docChanges();

    db.collection("waiting-rooms").doc(roomId).collection("patients").doc(patientId).get().then((snapshot)=>{
      patientTimestamp = snapshot.data().timestamp;
    }).catch(function(){
      missingPatient();
    });

    changes.forEach(change =>{
      if(change.type == 'added'){
        addPatientToLine(change.doc);
        if(change.doc.data().timestamp < patientTimestamp){
            currentTimeRemaining += change.doc.data().estimatedProcedureTime;
            numPatientsBefore ++;
        }
      } else if (change.type == 'removed'){
        $('[data-id=' + change.doc.id + ']').remove();
        if(change.doc.data().timestamp < patientTimestamp){
          currentTimeRemaining -= change.doc.data().estimatedProcedureTime;
          numPatientsBefore --;
        }
      }
    });

    //check is patient is next, if so trigger patient is next
    if(numPatientsBefore < 1){
      patientIsNext();
    }

    //only update time display if there was a difference in wait time
    if(prevCurrentTimeRemaining != currentTimeRemaining){
      prevCurrentTimeRemaining = currentTimeRemaining;
      makeTimeDisplayChart(initialTimeRemaining,currentTimeRemaining);
    }
  });

  $(document).ready(function(){
    $('#secondaryContainer-button').click(function(){
      console.log("clickedButton");
      leaveLine();
    });
    $('#leaveBtn').click(function(){
      $('#placeInLine-modal').html("You are currently " + getOrdinal(numPatientsBefore + 1) + " in line.");
    })
    $('#confirm-leave').click(function(){
      leaveLine();
    })
  })

  function missingPatient(){
      window.open("http://"+ path +"/noTimeStamp/" + roomId, "_self");
  }

  function patientIsNext(){
    $('.mainContainer').hide();
    $('#secondaryContainer-button2').hide();
    $('.secondaryContainer').show();
  }

  function leaveLine(){
    waitingRoomRef.doc(patientId).delete().then(function() {
      missingPatient();
    });
  }

  function addPatientToLine(doc){
    let patient = document.createElement('div');
    patient.setAttribute('data-id', doc.id);
    $(patient).addClass("avatarHolder");

    let avatar = document.createElement('div');
    $(avatar).addClass("patientAvatar");
    $(avatar).css("background-image","url(/images/avatars/"+ doc.data().avatarNumber +".svg)")

    let numDisplay = document.createElement('p');
    if(doc.id == patientId){
      $(numDisplay).html("<b>You</b>");
    } else {
      $(numDisplay).html(doc.data().patientNumber);
    }

    if(doc.data().timestamp > patientTimestamp){
      $(patient).css("opacity","0.3");
    }


    $(patient).append(avatar);
    $(patient).append(numDisplay);

    $('#lineUp').append(patient);
  }

  var timeDisplayChart;
  function makeTimeDisplayChart(initialTime,remainingTime){
    console.log(initialTime + "   :   " + remainingTime);
    if(typeof timeDisplayChart != 'undefined'){timeDisplayChart.destroy()};
    let ctx = document.getElementById('timeDisplayChart').getContext('2d');

    let passedTime = initialTime - remainingTime;
    monthBreakdownChart = new Chart(ctx, {
      type:'doughnut',
      data: {
        labels: ["passed time", "remaining time"],
        datasets: [{
          label: 'time',
          backgroundColor: ["lightblue","#F1F1F1"],
          data: [remainingTime,passedTime]//[passedTime,remainingTime]
        }]
      },
      options: {
        cutoutPercentage: 90,
        responsive: true,
        legend:{
          display: false
        },
        tooltips: {
          enabled: false
        },
        hover: {mode: null},
        plugins:{
          doughnutlabel:{
            labels: [
            {
              text: "About",
              font: {
                size: '50'
              },
              color: 'grey'
            },
            {
              text: getNiceTimeFromMinutes(remainingTime),
              font: {
                size: '100',
                weight: 'bold'
              },
              color: 'black'
            },
            {
              text: "Remaining",
              font: {
                size: '50'
              },
              color: 'grey'
            }]
          }
        }
      }
    })
  }

  </script>
